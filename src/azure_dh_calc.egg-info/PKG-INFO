Metadata-Version: 2.4
Name: azure-dh-calc
Version: 0.1.0
Summary: Azure Dedicated Hosts cost & capacity calculator
Author: Your Name
License: MIT
Requires-Python: >=3.12
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests>=2.32.3
Requires-Dist: typer>=0.12.3
Requires-Dist: rich>=13.7.1
Provides-Extra: dev
Requires-Dist: pytest>=8.3.2; extra == "dev"
Requires-Dist: pytest-cov>=5.0.0; extra == "dev"
Requires-Dist: ruff>=0.5.5; extra == "dev"
Dynamic: license-file

# Azure-DH-Calc

## Azure Dedicated Host Calculator (MVP)

Lightweight, iterative "vibe coding" project to estimate Dedicated Host (DH) counts & cost for a given VM workload. Early MVP uses static capacity & price placeholders to prove workflow; subsequent iterations will layer in real pricing, caching, mixed packing, and deployment.

### MVP Usage

Dev container will auto-install dependencies. From inside the container:

```bash
azure-dh-calc calc --help
azure-dh-calc calc westeurope USD D2s_v3 20
```

Output: table of feasible homogeneous host options sorted by lowest monthly cost.

### What It Does Now
1. Accepts region, currency, VM SKU, and count (region/currency are placeholders for future pricing).
2. Computes aggregate vCPU & memory.
3. Compares against static Dedicated Host types.
4. Shows host count, total capacity, estimated monthly cost, and cost per vCPU.

### Roadmap Highlights
See `FEATURE_LOG.md` for granular progression. Key upcoming steps:
- Live price ingestion (Azure Retail Prices API) with on-disk JSON cache per region.
- Mixed host-type optimization (bin-packing heuristic) vs homogeneous only.
- API + front-end (likely FastAPI + Azure Static Web App or Function + SWA).
- Currency normalization, reserved instance modeling, output export.

### Iteration & Branching Workflow
1. Create feature branch: `feat/<short-description>`.
2. Add/update tests first (TDD where practical).
3. Implement feature; update `FEATURE_LOG.md`.
4. Run `pytest` + `ruff` locally (or rely on CI).
5. Open PR (template auto-applies) â€“ include reasoning, trade-offs.
6. Squash merge after approval; tag if version bump.

### Suggested Techniques
- Start static: lock shapes & placeholder prices for fast iteration, defer API integration.
- Encapsulate price retrieval behind an interface (`pricing_client`) so swapping to cached disk layer is trivial.
- Keep catalogs pure-data for now; later replace with generated JSON (one file per region).
- Use dataclasses for clarity; they serialize easily to JSON.
- Keep calculations deterministic (no network) for unit tests; mock price layer once added.
- Optimize later: profile where needed (likely packing algorithm once implemented).

### Cheap Azure Hosting Paths
| Option | When | Pros | Cons |
| ------ | ---- | ---- | ---- |
| Azure Static Web Apps + Function (HTTP) | When adding UI & dynamic pricing | Very low idle cost, CI/CD integrated | Two artifacts to manage |
| Single Azure Function (Premium/Consumption) | API only | Pay-per-use | Cold starts (mitigated by Premium) |
| Container App (consumption) | Need container flexibility | Simpler to package everything | Slightly higher baseline than pure Functions |
| Static Site (GitHub Pages) + Client fetch to API | Display-only front-end | Zero hosting cost front-end | CORS & API mgmt |

Initial recommendation: Azure Function for price + packing API + optionally Static Web App for UI later.

### Local Dev Flow (Inside Dev Container)
```bash
pytest
ruff check .
azure-dh-calc calc westeurope USD D2s_v3 10
```

### Creating Remote GitHub Repo & First Push
```bash
gh repo create Azure-DH-Calc --public --source=. --remote=origin --push
```
If the repo already exists remotely, just:
```bash
git init
git add .
git commit -m "chore: initial mvp"
git branch -M maingit remote add origin git@github.com:<you>/Azure-DH-Calc.git
git push -u origin main
```

### Future: Price Retrieval Sketch
```python
from azure_dh_calc.pricing_client import query_prices
items = query_prices("serviceFamily eq 'Compute' and armRegionName eq 'westeurope' and contains(skuName,'Dedicated Host')", currency_code='USD')
```
Process `unitPrice` and map to host type names.

### License
MIT
